local StarterPlayer = game:GetService("StarterPlayer")
local spScripts = StarterPlayer:WaitForChild("StarterPlayerScripts")

local scriptName = "SmartClickToMove"

local function createClickToMove()
	if spScripts:FindFirstChild(scriptName) then
		spScripts[scriptName]:Destroy()
	end

	local newScript = Instance.new("LocalScript")
	newScript.Name = scriptName

	newScript.Source = [[
-- SmartClickToMove (v1)
-- Click to Move + GUI + dodge kill/damage part + dot/line light + red zone

local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Mouse = LocalPlayer:GetMouse()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- UI to create on/off button
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ClickToMoveUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui

local Button = Instance.new("TextButton")
Button.Size = UDim2.new(0, 200, 0, 50)
Button.Position = UDim2.new(0, 20, 0, 80)
Button.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
Button.TextColor3 = Color3.fromRGB(255, 255, 255)
Button.Text = "üî¥ Click To Move: OFF"
Button.Font = Enum.Font.GothamBold
Button.TextSize = 16
Button.Parent = ScreenGui

local clickToMoveEnabled = false
Button.MouseButton1Click:Connect(function()
	clickToMoveEnabled = not clickToMoveEnabled
	Button.Text = clickToMoveEnabled and "üü¢ Click To Move: ON" or "üî¥ Click To Move: OFF"
	Button.BackgroundColor3 = clickToMoveEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(255, 80, 80)
end)

local pathDots = {}
local dangerZones = {}

local function clearVisuals()
	for _,v in pairs(pathDots) do v:Destroy() end
	pathDots = {}
	for _,v in pairs(dangerZones) do v:Destroy() end
	dangerZones = {}
end

local function isDangerous(part)
	if not part:IsA("BasePart") then return false end
	local name = part.Name:lower()
	return name:find("kill") or name:find("lava") or name:find("damage")
end

local function visualizeDanger()
	for _, part in pairs(workspace:GetDescendants()) do
		if isDangerous(part) then
			local box = Instance.new("BoxHandleAdornment")
			box.Adornee = part
			box.Size = part.Size + Vector3.new(0.1,0.1,0.1)
			box.Color3 = Color3.fromRGB(255, 0, 0)
			box.AlwaysOnTop = true
			box.ZIndex = 2
			box.Transparency = 0.6
			box.Parent = part
			table.insert(dangerZones, box)
		end
	end
end

local function drawPath(points)
	for _,v in pairs(points) do
		local dot = Instance.new("Part")
		dot.Shape = Enum.PartType.Ball
		dot.Color = Color3.fromRGB(0, 255, 100)
		dot.Material = Enum.Material.Neon
		dot.Size = Vector3.new(0.3, 0.3, 0.3)
		dot.Anchored = true
		dot.CanCollide = false
		dot.CFrame = CFrame.new(v)
		dot.Parent = workspace
		table.insert(pathDots, dot)
	end
end

local function moveTo(position)
	clearVisuals()
	visualizeDanger()

	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		AgentJumpHeight = 7,
		AgentMaxSlope = 45
	})

	path:ComputeAsync(Character.HumanoidRootPart.Position, position)

	if path.Status == Enum.PathStatus.Success then
		local waypoints = path:GetWaypoints()

		local safeWaypoints = {}
		for _, wp in ipairs(waypoints) do
			local ray = Ray.new(wp.Position + Vector3.new(0,2,0), Vector3.new(0,-4,0))
			local hit = workspace:FindPartOnRay(ray, Character)
			if hit and isDangerous(hit) then
				-- b·ªè qua waypoint nguy hi·ªÉm
			else
				table.insert(safeWaypoints, wp)
			end
		end

		drawPath(safeWaypoints)

		for _, wp in ipairs(safeWaypoints) do
			Humanoid:MoveTo(wp.Position)
			if wp.Action == Enum.PathWaypointAction.Jump then
				Humanoid.Jump = true
			end
			Humanoid.MoveToFinished:Wait()
		end
	else
		warn("Can't find a safe way.")
	end
end

Mouse.Button1Down:Connect(function()
	if not clickToMoveEnabled then return end
	local target = Mouse.Hit and Mouse.Hit.p
	if target then
		moveTo(target)
	end
end)
]]

	newScript.Parent = spScripts
	print("[AutoCreateClickToMove] ‚úÖ Recreated SmartClickToMove script.")
end

-- Check every 5 seconds
while task.wait(5) do
	local s = spScripts:FindFirstChild(scriptName)
	if not s or not s:IsA("LocalScript") then
		createClickToMove()
	end
end
